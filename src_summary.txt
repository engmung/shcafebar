
Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\lib


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\app.css

@import "@fontsource/fira-mono";
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&family=Playfair+Display:wght@400;700&display=swap");

:root {
  --font-body: "Poppins", sans-serif;
  --font-heading: "Playfair Display", serif;
  --font-mono: "Fira Mono", monospace;
  --color-bg-overlay: rgba(18, 18, 18, 0.8);
  --color-text: #ffffff;
  --color-primary: #bb86fc;
  --color-secondary: #b10044;
  --color-accent: #cf6679;
  --color-surface: rgba(30, 30, 30, 0.9);
  --color-error: #cf6679;
  --z-index-menu: 1000;
}

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

body {
  color: var(--color-text);
  font-family: var(--font-body);
  line-height: 1.6;
  background-color: #000;
}

body::before {
  content: "";
  position: fixed;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 100vw;
  height: 100vh;
  background-image: url("/bg.jpg");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  z-index: -2;
}

body::after {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 150%;
  background-color: var(--color-bg-overlay);
  z-index: -1;
}

.app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  position: relative;
  z-index: 1;
}

header,
.header-nav,
footer {
  width: 100%;
  box-sizing: border-box;
}

main {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  box-sizing: border-box;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--font-heading);
  font-weight: 700;
  color: var(--color-primary);
  margin-top: 0;
}

a {
  color: var(--color-secondary);
  text-decoration: none;
  transition: color 0.3s ease;
}

a:hover {
  color: var(--color-accent);
}

button {
  font-family: var(--font-body);
  cursor: pointer;
  background-color: var(--color-primary);
  color: var(--color-bg-overlay);
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: var(--color-accent);
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@media (max-width: 768px) {
  body {
    font-size: 14px;
  }

  h1 {
    font-size: 1.8rem;
  }

  h2 {
    font-size: 1.5rem;
  }
}

/* Smooth scrolling for the whole page */
html {
  scroll-behavior: smooth;
}

/* Improve text rendering */
body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Basic form styles */
input,
textarea,
select {
  font-family: var(--font-body);
  font-size: 1rem;
  padding: 0.5rem;
  border: 1px solid var(--color-secondary);
  border-radius: 4px;
  background-color: var(--color-surface);
  color: var(--color-text);
  width: 100%;
  box-sizing: border-box;
}

/* Focus styles for accessibility */
a:focus,
button:focus,
input:focus,
textarea:focus,
select:focus {
  outline: 2px solid var(--color-accent);
  outline-offset: 2px;
}

/* Utility classes */
.text-center {
  text-align: center;
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\app.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%sveltekit.assets%/favicon.png" />
    <meta name="viewport" content="width=device-width" />
    <link rel="preload" as="image" href="/bg.jpg" />
    %sveltekit.head%
  </head>
  <body data-sveltekit-preload-data="hover">
    <div style="display: contents">%sveltekit.body%</div>
  </body>
</html>


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\hooks.server.js

import { dev } from "$app/environment";

/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
  // CORS 설정
  if (event.request.method !== "OPTIONS") {
    event.request.headers.set("Access-Control-Allow-Origin", "*");
  }

  const session = event.cookies.get("session");
  if (session) {
    try {
      event.locals.user = JSON.parse(session);
    } catch (error) {
      console.error("Failed to parse session:", error);
      event.cookies.delete("session", { path: "/" });
    }
  }

  const response = await resolve(event);

  // CORS 헤더 설정
  response.headers.set("Access-Control-Allow-Origin", "*");
  response.headers.set(
    "Access-Control-Allow-Methods",
    "GET, POST, PUT, DELETE, OPTIONS"
  );
  response.headers.set(
    "Access-Control-Allow-Headers",
    "Content-Type, Authorization"
  );

  // 쿠키 설정 수정
  const sessionCookie = response.headers.get("Set-Cookie");
  if (sessionCookie) {
    response.headers.set(
      "Set-Cookie",
      sessionCookie + `; SameSite=Lax; ${dev ? "Secure; " : ""}HttpOnly`
    );
  }

  return response;
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\lib\db.js

import Database from "better-sqlite3";
import { dev } from "$app/environment";
import { DB_PATH } from "$env/static/private";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let db;

function getDatabase() {
  if (!db) {
    const dbPath = dev
      ? path.join(__dirname, "..", "..", "dev.db")
      : path.join(process.cwd(), DB_PATH);

    db = new Database(dbPath, { verbose: console.log });
    db.pragma("foreign_keys = ON");

    if (!fs.existsSync(dbPath)) {
      createTables();
    }
  }
  return db;
}

function createTables() {
  db.exec(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL UNIQUE,
      role TEXT NOT NULL DEFAULT 'user'
    );

    CREATE TABLE IF NOT EXISTS menu_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      price REAL NOT NULL,
      description TEXT,
      category TEXT NOT NULL,
      detail_content TEXT,
      is_visible BOOLEAN NOT NULL DEFAULT 1
    );

    CREATE TABLE IF NOT EXISTS orders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      date TEXT NOT NULL,
      reservation_id INTEGER,
      total_amount REAL NOT NULL,
      FOREIGN KEY (reservation_id) REFERENCES reservations(id) ON DELETE SET NULL
    );

    CREATE TABLE IF NOT EXISTS available_dates (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      date TEXT NOT NULL,
      time TEXT NOT NULL,
      capacity INTEGER NOT NULL,
      menu_id INTEGER,
      drink_id INTEGER,
      FOREIGN KEY (menu_id) REFERENCES menu_items(id) ON DELETE SET NULL,
      FOREIGN KEY (drink_id) REFERENCES menu_items(id) ON DELETE SET NULL,
      UNIQUE(date, time)
    );

    CREATE TABLE IF NOT EXISTS ingredients (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL UNIQUE,
      cost REAL NOT NULL,
      characteristics TEXT,
      volume REAL NOT NULL,
      unit TEXT NOT NULL,
      min_volume REAL
    );

    CREATE TABLE IF NOT EXISTS reservations (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_name TEXT NOT NULL,
      date TEXT NOT NULL,
      time TEXT NOT NULL,
      guests INTEGER NOT NULL,
      menu_request TEXT DEFAULT '',
      drink_request TEXT DEFAULT '',
      status TEXT NOT NULL DEFAULT 'pending',
      FOREIGN KEY (user_name) REFERENCES users(name) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS menu_ingredients (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      menu_id INTEGER NOT NULL,
      ingredient_id INTEGER NOT NULL,
      amount REAL NOT NULL,
      unit TEXT NOT NULL,
      FOREIGN KEY (menu_id) REFERENCES menu_items(id) ON DELETE CASCADE,
      FOREIGN KEY (ingredient_id) REFERENCES ingredients(id) ON DELETE CASCADE
    );
  `);
}

const dbInstance = getDatabase();
export { dbInstance as db };


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\lib\Loading.svelte

<script>
    import { onMount } from 'svelte';
    import { fade } from 'svelte/transition';
  
    export let isLoading;
  
    let imageLoaded = false;
    let timerExpired = false;
  
    function checkLoading() {
      if (imageLoaded && timerExpired) {
        isLoading = false;
      }
    }
  
    onMount(() => {
      const img = new Image();
      img.src = '/bg.jpg';
      img.onload = () => {
        imageLoaded = true;
        checkLoading();
      };
  
      setTimeout(() => {
        timerExpired = true;
        checkLoading();
      }, 1000);
    });
  </script>
  
  {#if isLoading}
    <div class="loading-overlay" transition:fade={{ duration: 300 }}>
      <div class="loading-spinner"></div>
      <p>Loading...</p>
    </div>
  {/if}
  
  <style>
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #000000; /* 완전 불투명한 검정색으로 변경 */
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
  
    .loading-spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
    }
  
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  
    p {
      color: #fff;
      margin-top: 1rem;
      font-size: 1.2rem;
    }
  </style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\lib\MarkdownEditor.svelte

<script>
    import { onMount } from 'svelte';
    import { marked } from 'marked';
  
    export let value = '';
    export let placeholder = 'Write your content here...';
  
    let textarea;
    let preview;
  
    $: previewHtml = marked(value);
  
    function handleInput() {
      value = textarea.value;
    }
  
    onMount(() => {
      textarea.style.height = `${textarea.scrollHeight}px`;
    });
  </script>
  
  <div class="markdown-editor">
    <textarea
      bind:this={textarea}
      {value}
      on:input={handleInput}
      {placeholder}
    ></textarea>
    <div class="preview" bind:this={preview}>
      {@html previewHtml}
    </div>
  </div>
  
  <style>
    .markdown-editor {
      display: flex;
      gap: 1rem;
    }
    textarea, .preview {
      width: 50%;
      min-height: 300px;
      padding: 1rem;
      border: 1px solid var(--color-secondary);
      border-radius: 4px;
      background-color: var(--color-surface);
      color: var(--color-text);
    }
    textarea {
      resize: vertical;
      white-space: pre-wrap;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }
    .preview {
      overflow-y: auto;
    }
    .preview :global(p) {
      white-space: pre-wrap;
    }
    .preview :global(h1),
    .preview :global(h2),
    .preview :global(h3),
    .preview :global(h4),
    .preview :global(h5),
    .preview :global(h6) {
      color: var(--color-primary);
    }
    .preview :global(a) {
      color: var(--color-secondary);
    }
    .preview :global(code) {
      background-color: #333;
      color: var(--color-text);
    }
    .preview :global(pre) {
      background-color: #333;
      color: var(--color-text);
    }
    .preview :global(blockquote) {
      border-left: 4px solid var(--color-secondary);
      color: #bbb;
    }
    @media (max-width: 768px) {
    .markdown-editor {
      flex-direction: column;
    }

    textarea, .preview {
      width: 100%;
      min-height: 200px;
    }
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\lib\MenuDetailPopup.svelte

<script>
    import { marked } from 'marked';
    export let item = null;
    export let onClose = () => {};
  
    function renderMarkdown(content) {
      marked.setOptions({
        baseUrl: '/', // 기본 URL 설정
        breaks: true, // 줄바꿈 허용
      });
      return marked(content || '');
    }
  </script>
  
  {#if item}
    <div class="popup">
      <div class="popup-content">
        <h2>{item.name}</h2>
        <p>Price: ${item.price}</p>
        <p>Category: {item.category}</p>
        <p>Description: {item.description}</p>
        <h3>Ingredients</h3>
        <ul>
          {#each item.ingredients || [] as ingredient}
            <li>{ingredient.amount} {ingredient.unit} of {ingredient.name}</li>
          {/each}
        </ul>
        <h3>Detail Content</h3>
        <div class="markdown-preview">
          {@html renderMarkdown(item.detail_content)}
        </div>
        <button on:click={onClose}>Close</button>
      </div>
    </div>
  {/if}
  
  <style>
    .popup {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: var(--z-index-menu);
    }
    .popup-content {
      background-color: var(--color-surface);
      color: var(--color-text);
      padding: 2rem;
      border-radius: 5px;
      max-width: 80%;
      width: 100%;
      max-height: 80vh;
      overflow-y: auto;
    }
    .markdown-preview {
      border: 1px solid var(--color-secondary);
      padding: 1rem;
      border-radius: 4px;
      max-height: 400px;
      overflow-y: auto;
      background-color: var(--color-bg);
    }
    .markdown-preview :global(h1),
    .markdown-preview :global(h2),
    .markdown-preview :global(h3),
    .markdown-preview :global(h4),
    .markdown-preview :global(h5),
    .markdown-preview :global(h6) {
      color: var(--color-primary);
    }
    .markdown-preview :global(a) {
      color: var(--color-secondary);
    }
    .markdown-preview :global(code) {
      background-color: #333;
      color: var(--color-text);
    }
    .markdown-preview :global(pre) {
      background-color: #333;
      color: var(--color-text);
    }
    .markdown-preview :global(blockquote) {
      border-left: 4px solid var(--color-secondary);
      color: #bbb;
    }
    @media (max-width: 768px) {
    .popup-content {
      padding: 1rem;
      max-width: 95%;
    }

    .markdown-preview {
      max-height: 300px;
    }
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\lib\reservationUtils.js

import { db } from "$lib/db";

export function isValidReservation(date, time) {
  const now = new Date();
  const reservationDate = new Date(`${date}T${time}`);

  if (reservationDate < now) {
    return false;
  }

  const hours = reservationDate.getHours();
  if (hours < 17 || hours >= 22) {
    return false;
  }

  return true;
}

export function isTableAvailable(date, time) {
  const existingReservations = db
    .prepare(
      "SELECT COUNT(*) as count FROM reservations WHERE date = ? AND time = ?"
    )
    .get(date, time);
  return existingReservations.count < 5;
}


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\login


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\menu


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\reservations


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\+layout.server.js

export function load({ locals }) {
  return {
    user: locals.user,
  };
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\+layout.svelte

<script>
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import { fly } from 'svelte/transition';
  import { invalidateAll } from '$app/navigation';
  import '../app.css';
  import Loading from '$lib/Loading.svelte';

  export let data;

  let isMenuOpen = false;
  let isLoading = true;

  async function handleLogout() {
    const response = await fetch('/api/logout', { method: 'POST' });
    if (response.ok) {
      await invalidateAll();
      goto('/');
      isMenuOpen = false;
    }
  }

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
  }

  function closeMenu() {
    isMenuOpen = false;
  }

  function goHome() {
    goto('/');
    closeMenu();
  }

  function goToLogin() {
    goto('/login');
    closeMenu();
  }
</script>

<Loading bind:isLoading />

{#if !isLoading}
  <div class="app">
    <header>
      <div class="header-title">
        <h1 class="logo" on:click={goHome} on:keydown={(e) => e.key === 'Enter' && goHome()} role="button" tabindex="0">
          SH's BAR & CAFE
        </h1>
      </div>
    </header>
    
    <div class="header-nav">
      <div class="header-content">
        <div class="header-left">
          <button class="menu-button" on:click={toggleMenu}>
            {#if isMenuOpen}
              Close
            {:else}
              ☰ Menu
            {/if}
          </button>
        </div>
        <div class="header-right">
          {#if data.user}
            <span class="user-name">{data.user.name}</span>
            <button class="logout-button" on:click={handleLogout}>Logout</button>
          {:else}
            <button class="login-button" on:click={goToLogin}>Login</button>
          {/if}
        </div>
      </div>
    </div>

    <main>
      <slot />
    </main>

    <footer>
      <p>&copy; 2024 SH's Bar & Cafe. All rights reserved.</p>
    </footer>

    {#if isMenuOpen}
      <nav transition:fly={{ y: -200, duration: 300 }}>
        <ul>
          <li><a href="/" on:click={closeMenu}>Home</a></li>
          <li><a href="/menu" on:click={closeMenu}>Menu</a></li>
          <li><a href="/reservations" on:click={closeMenu}>Reservations</a></li>
          {#if data.user?.role === 'admin'}
            <li><a href="/admin" on:click={closeMenu}>Admin</a></li>
          {/if}
        </ul>
      </nav>
    {/if}
  </div>
{/if}

<style>
  .app {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  header {
    background-color: rgba(0, 0, 0, 0.7);
    color: #fff;
    text-align: center;
    padding: 1rem;
  }

  .header-nav {
    background-color: rgba(0, 0, 0, 0.7);
    color: #fff;
    position: sticky;
    top: 0;
    z-index: calc(var(--z-index-menu) + 1);
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.1rem .2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .header-left, .header-right {
    display: flex;
    align-items: center;
  }

  .logo {
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    user-select: none;
    margin: 0;
  }

  .menu-button, .login-button, .logout-button {
    background: none;
    border: none;
    font-size: 1rem;
    cursor: pointer;
    padding: 0.5rem 1rem;
    transition: opacity 0.3s ease;
  }

  .menu-button {
    color: #fff;
  }

  .login-button, .logout-button {
    font-weight: 1000;
    color: #ff0000;
    
    

  }

  .login-button:hover, .logout-button:hover {
    opacity: 0.8;
    
  }

  .user-name {
    color: #fff;
    font-size: 1rem;
    margin-right: 1rem;
  }

  main {
    flex: 1;
    padding: 2rem;
  }

  footer {
    background-color: rgba(0, 0, 0, 0.7);
    color: #fff;
    text-align: center;
    padding: 1rem;
  }

  nav {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: var(--z-index-menu);
  }

  nav ul {
    list-style-type: none;
    padding: 0;
    text-align: center;
  }

  nav li {
    margin: 1rem 0;
  }

  nav a {
    color: var(--color-secondary);
    text-decoration: none;
    font-size: 2rem;
    transition: color 0.3s ease;
  }

  nav a:hover {
    color: var(--color-accent);
  }

  @media (max-width: 768px) {
    .logo {
      font-size: 1.5rem;
    }

    .user-name {
      font-size: 0.9rem;
      margin-right: 0.5rem;
    }

    .login-button, .logout-button {
      padding: 0.4rem 0.8rem;
      font-size: 0.9rem;
    }

    nav {
      padding: 1rem;
    }

    nav ul {
      width: 100%;
    }

    nav li {
      margin: 0.5rem 0;
      text-align: center;
    }

    nav a {
      font-size: 1.2rem;
      display: block;
      width: 100%;
      text-align: center;
      padding: 0.5rem 0;
      font-weight: 1000;
    }
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\+page.server.js

import { db } from "$lib/db";

export function load() {
  const insertUser = db.prepare(
    "INSERT OR IGNORE INTO users (name, role) VALUES (?, ?)"
  );
  insertUser.run("이승훈", "user");
  insertUser.run("yc2313", "admin");

  const users = db.prepare("SELECT * FROM users").all();
  return {
    users,
  };
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\+page.svelte

<script>
  import { goto } from '$app/navigation';

  function navigateTo(path) {
    goto(path);
  }
</script>

<svelte:head>
  <title>Home - Bar & Cafe</title>
</svelte:head>

<div class="container">
  <h1>Welcome to SH's Bar & Cafe</h1>
  <p>Set up some refreshments. Join me for food and conversation?</p>

  <div class="button-container">
    <button class="large-button reservation" on:click={() => navigateTo('/reservations')}>
      <div class="icon-placeholder">
        <img src="/time.png" alt="Time" class="icon-image" />
      </div>
      <span>Reservation</span>
    </button>
    <button class="large-button menu" on:click={() => navigateTo('/menu')}>
      <div class="icon-placeholder">
        <img src="/menu.png" alt="Menu" class="icon-image" />
      </div>
      <span>View Menu</span>
    </button>
  </div>
</div>

<style>
  .container {
    text-align: center;
    padding: 2rem;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  p {
    font-size: 1.2rem;
    margin-bottom: 2rem;
  }

  .button-container {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .large-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 200px;
    height: 200px;
    border: none;
    border-radius: 10px;
    background-color: var(--color-secondary);
    color: white;
    font-size: 1.2rem;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.3s;
  }

  .large-button:hover {
    background-color: var(--color-accent);
    transform: translateY(-5px);
  }

  .icon-placeholder {
    width: 100px;
    height: 100px;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    margin-bottom: 1rem;
  }

  .icon-image {
    width: 100%;
    height: 100%;
    object-fit: contain; /* Prevent image overflow */
  }

  @media (max-width: 600px) {
    .large-button {
      width: 100%;
      max-width: 300px;
      height: 150px;
    }

    .icon-placeholder {
      width: 70px;
      height: 70px;
      background-color: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      margin-bottom: 1rem;
    }
  }
</style>

Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\database


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\ingredients


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\menu


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\reservations


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\+layout.svelte

<script>
  import { page } from '$app/stores';
  import { fly } from 'svelte/transition';
  let isMenuOpen = false;

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
  }
</script>

<div class="admin-layout">
  <header>
    <h1>Admin Dashboard</h1>
    <button class="menu-toggle" on:click={toggleMenu} aria-expanded={isMenuOpen}>
      {isMenuOpen ? '✕' : '☰'}
    </button>
  </header>

  <div class="content-wrapper">
    <nav class:open={isMenuOpen}>
      <ul>
        <li><a href="/admin" class:active={$page.url.pathname === '/admin'}>Dashboard</a></li>
        <li><a href="/admin/reservations" class:active={$page.url.pathname === '/admin/reservations'}>Reservations</a></li>
        <li><a href="/admin/menu" class:active={$page.url.pathname === '/admin/menu'}>Menu</a></li>
        <li><a href="/admin/database" class:active={$page.url.pathname === '/admin/database'}>Database</a></li>
        <li><a href="/admin/ingredients" class:active={$page.url.pathname === '/admin/ingredients'}>Ingredients</a></li>
      </ul>
    </nav>

    <main>
      <slot />
    </main>
  </div>
</div>

<style>
  .admin-layout {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  header {
    background-color: #333;
    color: white;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  h1 {
    margin: 0;
    font-size: 1.5rem;
  }

  .menu-toggle {
    display: none;
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
  }

  .content-wrapper {
    display: flex;
    flex: 1;
  }

  nav {
    width: 200px;
    background-color: #f0f0f0;
    padding: 1rem;
  }

  nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  nav li {
    margin-bottom: 0.5rem;
  }

  nav a {
    text-decoration: none;
    color: #333;
    padding: 0.5rem;
    display: block;
    border-radius: 4px;
  }

  nav a.active {
    background-color: #333;
    color: white;
  }

  main {
    flex: 1;
    padding: 1rem;
  }

  @media (max-width: 768px) {
    .menu-toggle {
      display: block;
    }

    .content-wrapper {
      flex-direction: column;
    }

    nav {
      width: 100%;
      display: none;
    }

    nav.open {
      display: block;
    }

    main {
      padding: 0.5rem;
    }
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\+page.svelte

<script>
  import { onMount } from 'svelte';

  let stats = {
    totalReservations: 0,
    pendingReservations: 0,
    totalMenuItems: 0,
    totalUsers: 0
  };
  let lowStockIngredients = [];

  onMount(async () => {
    await loadStats();
    await loadLowStockIngredients();
  });

  async function loadStats() {
    const response = await fetch('/api/admin/stats');
    if (response.ok) {
      stats = await response.json();
    } else {
      console.error('Failed to load stats');
    }
  }

  async function loadLowStockIngredients() {
    const response = await fetch('/api/admin/ingredients/low-stock');
    if (response.ok) {
      lowStockIngredients = await response.json();
    } else {
      console.error('Failed to load low stock ingredients');
    }
  }
</script>

<h1>Admin Dashboard</h1>

<div class="stats-grid">
  <div class="stat-item">
    <h3>Total Reservations</h3>
    <p>{stats.totalReservations}</p>
  </div>
  <div class="stat-item">
    <h3>Pending Reservations</h3>
    <p>{stats.pendingReservations}</p>
  </div>
  <div class="stat-item">
    <h3>Total Menu Items</h3>
    <p>{stats.totalMenuItems}</p>
  </div>
  <div class="stat-item">
    <h3>Total Users</h3>
    <p>{stats.totalUsers}</p>
  </div>
</div>

<h2>Low Stock Ingredients</h2>
{#if lowStockIngredients.length > 0}
  <ul class="ingredient-list">
    {#each lowStockIngredients as ingredient}
      <li>
        <span class="ingredient-name">{ingredient.name}</span>
        <span class="ingredient-stock">Current: {ingredient.volume} {ingredient.unit}</span>
        <span class="ingredient-min">Minimum: {ingredient.min_volume} {ingredient.unit}</span>
      </li>
    {/each}
  </ul>
{:else}
  <p>All ingredients are well-stocked.</p>
{/if}

<style>
  :global(body) {
    background-color: #121212;
    color: #e0e0e0;
  }

  h1, h2 {
    color: #bb86fc;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .stat-item {
    background-color: #1e1e1e;
    padding: 1rem;
    border-radius: 4px;
    text-align: center;
    border: 1px solid #333;
  }

  .stat-item h3 {
    margin-top: 0;
    color: #03dac6;
  }

  .ingredient-list {
    list-style-type: none;
    padding: 0;
  }

  .ingredient-list li {
    background-color: #1e1e1e;
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    border-radius: 4px;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    border: 1px solid #333;
  }

  .ingredient-name {
    font-weight: bold;
    color: #03dac6;
  }

  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }

    .ingredient-list li {
      flex-direction: column;
      align-items: flex-start;
    }

    .ingredient-name, .ingredient-stock, .ingredient-min {
      width: 100%;
      margin-bottom: 0.25rem;
    }
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\database\+page.svelte

<script>
  import { onMount } from 'svelte';

  let tables = [];
  let selectedTable = null;
  let tableData = [];

  onMount(async () => {
    const response = await fetch('/api/admin/database/tables');
    tables = await response.json();
  });

  async function loadTableData(tableName) {
    selectedTable = tableName;
    const response = await fetch(`/api/admin/database/tables/${tableName}`);
    tableData = await response.json();
  }

  async function updateRecord(record) {
    const response = await fetch(`/api/admin/database/tables/${selectedTable}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(record)
    });

    const result = await response.json();

    if (response.ok) {
      if (result.changes > 0) {
        alert('Record updated successfully');
        await loadTableData(selectedTable);
      } else {
        alert('No changes were made');
      }
    } else {
      alert('Failed to update record: ' + (result.error || 'Unknown error'));
    }
  }

  function isNumber(value) {
    return typeof value === 'number' && !isNaN(value);
  }

  function updateField(record, key, event) {
    const newValue = isNumber(record[key]) ? Number(event.target.value) : event.target.value;
    record[key] = newValue;
  }

  async function deleteRecord(record) {
    if (confirm('Are you sure you want to delete this record?')) {
      const response = await fetch(`/api/admin/database/tables/${selectedTable}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: record.id })
      });

      if (response.ok) {
        alert('Record deleted successfully');
        await loadTableData(selectedTable);
      } else {
        const errorData = await response.json();
        alert('Failed to delete record: ' + (errorData.error || 'Unknown error'));
      }
    }
  }
</script>

<h1>Database Management</h1>

<div class="container">
  <div class="table-list">
    <h2>Tables</h2>
    <ul>
      {#each tables as table}
        <li>
          <button on:click={() => loadTableData(table)}>{table}</button>
        </li>
      {/each}
    </ul>
  </div>

  <div class="table-data">
    {#if selectedTable}
      <h2>{selectedTable}</h2>
      {#if tableData.length > 0}
        <table>
          <thead>
            <tr>
              {#each Object.keys(tableData[0]) as column}
                <th>{column}</th>
              {/each}
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {#each tableData as record}
              <tr>
                {#each Object.entries(record) as [key, value]}
                  <td>
                    {#if isNumber(value)}
                      <input 
                        type="number" 
                        value={value}
                        on:input={(event) => updateField(record, key, event)}
                      />
                    {:else}
                      <input 
                        type="text" 
                        value={value}
                        on:input={(event) => updateField(record, key, event)}
                      />
                    {/if}
                  </td>
                {/each}
                <td>
                  <button on:click={() => updateRecord(record)}>Update</button>
                  <button on:click={() => deleteRecord(record)}>Delete</button>
                </td>
              </tr>
            {/each}
          </tbody>
        </table>
      {:else}
        <p>No data in this table.</p>
      {/if}
    {:else}
      <p>Select a table to view its data.</p>
    {/if}
  </div>
</div>

<style>
  :global(body) {
    background-color: #121212;
    color: #e0e0e0;
  }

  h1, h2 {
    color: #bb86fc;
  }

  .container {
    display: flex;
    gap: 2rem;
  }

  .table-list {
    flex: 1;
  }

  .table-data {
    flex: 3;
  }

  ul {
    list-style-type: none;
    padding: 0;
  }

  li {
    margin-bottom: 0.5rem;
  }

  button {
    background-color: #bb86fc;
    color: #000;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  button:hover {
    background-color: #3700b3;
    color: #fff;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    background-color: #1e1e1e;
  }

  th, td {
    border: 1px solid #333;
    padding: 0.5rem;
    text-align: left;
  }

  th {
    background-color: #2c2c2c;
    color: #03dac6;
  }

  input {
    width: 100%;
    box-sizing: border-box;
    background-color: #2c2c2c;
    border: 1px solid #333;
    color: #e0e0e0;
    padding: 0.3rem;
  }

  @media (max-width: 768px) {
    .container {
      flex-direction: column;
    }

    .table-list, .table-data {
      flex: auto;
    }

    table, thead, tbody, th, td, tr {
      display: block;
    }

    thead tr {
      position: absolute;
      top: -9999px;
      left: -9999px;
    }

    tr {
      margin-bottom: 1rem;
      border: 1px solid #333;
    }

   
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\ingredients\+page.svelte

<script>
  import { onMount } from 'svelte';

  let ingredients = [];
  let newIngredient = { name: '', cost: null, characteristics: '', volume: null, unit: '', min_volume: null };

  onMount(async () => {
    await loadIngredients();
  });

  async function loadIngredients() {
    const response = await fetch('/api/admin/ingredients');
    if (response.ok) {
      ingredients = await response.json();
    } else {
      console.error('Failed to load ingredients');
    }
  }

  async function addIngredient() {
    const response = await fetch('/api/admin/ingredients', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newIngredient)
    });

    if (response.ok) {
      await loadIngredients();
      newIngredient = { name: '', cost: null, characteristics: '', volume: null, unit: '', min_volume: null };
    } else {
      alert('Failed to add ingredient');
    }
  }

  async function updateIngredient(ingredient) {
    const response = await fetch(`/api/admin/ingredients/${ingredient.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(ingredient)
    });

    if (response.ok) {
      await loadIngredients();
    } else {
      alert('Failed to update ingredient');
    }
  }

  async function deleteIngredient(id) {
    if (confirm('Are you sure you want to delete this ingredient?')) {
      const response = await fetch(`/api/admin/ingredients/${id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        await loadIngredients();
      } else {
        alert('Failed to delete ingredient');
      }
    }
  }
</script>

<h1>Manage Ingredients</h1>

<form on:submit|preventDefault={addIngredient}>
  <div class="form-group">
    <label for="name">Name</label>
    <input id="name" bind:value={newIngredient.name} placeholder="Name" required>
  </div>
  <div class="form-group">
    <label for="cost">Cost</label>
    <input id="cost" type="number" bind:value={newIngredient.cost} placeholder="Cost" step="0.01" required>
  </div>
  <div class="form-group">
    <label for="characteristics">Characteristics</label>
    <input id="characteristics" bind:value={newIngredient.characteristics} placeholder="Characteristics">
  </div>
  <div class="form-group">
    <label for="volume">Volume</label>
    <input id="volume" type="number" bind:value={newIngredient.volume} placeholder="Volume" step="0.01" required>
  </div>
  <div class="form-group">
    <label for="unit">Unit</label>
    <input id="unit" bind:value={newIngredient.unit} placeholder="Unit" required>
  </div>
  <div class="form-group">
    <label for="min_volume">Minimum Volume</label>
    <input id="min_volume" type="number" bind:value={newIngredient.min_volume} placeholder="Minimum Volume" step="0.01" required>
  </div>
  <button type="submit">Add Ingredient</button>
</form>

<h2>Ingredients</h2>
<div class="table-container">
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Cost</th>
        <th>Characteristics</th>
        <th>Volume</th>
        <th>Unit</th>
        <th>Minimum Volume</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      {#each ingredients as ingredient (ingredient.id)}
        <tr>
          <td data-label="Name"><input bind:value={ingredient.name}></td>
          <td data-label="Cost"><input type="number" bind:value={ingredient.cost} step="0.01"></td>
          <td data-label="Characteristics"><input bind:value={ingredient.characteristics}></td>
          <td data-label="Volume"><input type="number" bind:value={ingredient.volume} step="0.01"></td>
          <td data-label="Unit"><input bind:value={ingredient.unit}></td>
          <td data-label="Minimum Volume"><input type="number" bind:value={ingredient.min_volume} step="0.01"></td>
          <td data-label="Actions">
            <button on:click={() => updateIngredient(ingredient)}>Update</button>
            <button on:click={() => deleteIngredient(ingredient.id)}>Delete</button>
          </td>
        </tr>
      {/each}
    </tbody>
  </table>
</div>

<style>
  :global(body) {
    background-color: #121212;
    color: #e0e0e0;
  }

  h1, h2 {
    color: #bb86fc;
  }

  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
    background-color: #1e1e1e;
    padding: 1rem;
    border-radius: 4px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  label {
    color: #03dac6;
  }

  input{
    background-color: #2c2c2c;
    border: 1px solid #333;
    color: #e0e0e0;
    padding: 0.5rem;
    border-radius: 4px;
  }

  button {
    background-color: #bb86fc;
    color: #000;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  button:hover {
    background-color: #3700b3;
    color: #fff;
  }

  .table-container {
    overflow-x: auto;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 2rem;
    background-color: #1e1e1e;
  }

  th, td {
    border: 1px solid #333;
    padding: 0.5rem;
    text-align: left;
  }

  th {
    background-color: #2c2c2c;
    color: #03dac6;
  }

  td {
    color: #ffffff;
  }

  @media (max-width: 1024px) {
    table {
      font-size: 0.9rem;
    }

    th, td {
      padding: 0.3rem;
    }
  }

  @media (max-width: 768px) {
    table, thead, tbody, th, td, tr {
      display: block;
    }

    thead tr {
      position: absolute;
      top: -9999px;
      left: -9999px;
    }

    tr {
      margin-bottom: 1rem;
      border: 1px solid #333;
    }

    td {
      border: none;
      position: relative;
      padding-left: 50%;
      display: flex;
      align-items: center;
    }

    td:before {
      content: attr(data-label);
      position: absolute;
      left: 6px;
      width: 45%;
      padding-right: 10px;
      white-space: nowrap;
      font-weight: bold;
      color: #03dac6;
    }

    td input {
      width: 100%;
    }
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\menu\+page.svelte




<script>
  import { onMount } from 'svelte';
  import { writable } from 'svelte/store';
  import { marked } from 'marked';
  import MarkdownEditor from '$lib/MarkdownEditor.svelte';

  let menuItems = [];
  let ingredients = [];
  let newItemStore = writable({ 
    name: '', 
    description: '', 
    price: '', 
    category: '', 
    ingredients: [],
    detail_content: '',
    is_visible: true  // 새로운 필드 추가
  });
  let selectedItemStore = writable(null);
  let showPopup = false;
  let editMode = false;

  onMount(async () => {
    await loadMenuItems();
    await loadIngredients();
  });

  async function loadMenuItems() {
    const response = await fetch('/api/admin/menu');
    if (response.ok) {
      menuItems = await response.json();
    } else {
      console.error('Failed to load menu items');
    }
  }

  async function loadIngredients() {
    const response = await fetch('/api/admin/ingredients');
    if (response.ok) {
      ingredients = await response.json();
    } else {
      console.error('Failed to load ingredients');
    }
  }

  async function addMenuItem() {
    try {
      console.log("Adding new item:", $newItemStore);
      const response = await fetch('/api/admin/menu', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify($newItemStore)
      });

      if (response.ok) {
        await loadMenuItems();
        newItemStore.set({ 
          name: '', 
          description: '', 
          price: '', 
          category: '', 
          ingredients: [],
          detail_content: '',
          is_visible: true
        });
      } else {
        const errorData = await response.json();
        alert('Failed to add menu item: ' + (errorData.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error adding menu item:', error);
      alert('An error occurred while adding the menu item');
    }
  }

  async function updateMenuItem(item) {
    try {
      console.log("Updating item:", item);
      const response = await fetch(`/api/admin/menu/${item.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(item)
      });

      if (response.ok) {
        await loadMenuItems();
        closePopup();
      } else {
        const errorData = await response.json();
        alert('Failed to update menu item: ' + (errorData.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error updating menu item:', error);
      alert('An error occurred while updating the menu item');
    }
  }

  async function deleteMenuItem(id) {
    if (confirm('Are you sure you want to delete this menu item?')) {
      try {
        const response = await fetch(`/api/admin/menu/${id}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          await loadMenuItems();
        } else {
          const errorData = await response.json();
          alert('Failed to delete menu item: ' + (errorData.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error deleting menu item:', error);
        alert('An error occurred while deleting the menu item');
      }
    }
  }

  async function toggleVisibility(item) {
    const updatedItem = { ...item, is_visible: !item.is_visible };
    await updateMenuItem(updatedItem);
  }

  function addIngredientToItem(itemStore) {
    itemStore.update(item => ({
      ...item,
      ingredients: [...item.ingredients, { id: '', amount: 0, unit: '' }]
    }));
  }

  function removeIngredientFromItem(itemStore, index) {
    itemStore.update(item => ({
      ...item,
      ingredients: item.ingredients.filter((_, i) => i !== index)
    }));
  }

  function showDetails(item) {
    selectedItemStore.set({...item, detail_content: item.detail_content || ''});
    showPopup = true;
    editMode = false;
  }

  function closePopup() {
    showPopup = false;
    selectedItemStore.set(null);
    editMode = false;
  }

  function toggleEditMode() {
    editMode = !editMode;
  }

  function updateDetailContent(event) {
    $selectedItemStore.detail_content = event.detail.value;
  }

  function renderMarkdown(content) {
    return marked(content || '');
  }
</script>

<h1>Manage Menu</h1>

<form on:submit|preventDefault={addMenuItem}>
  <input bind:value={$newItemStore.name} placeholder="Name" required>
  <input bind:value={$newItemStore.description} placeholder="Description">
  <input type="number" bind:value={$newItemStore.price} placeholder="Price" step="0.01" required>
  <select bind:value={$newItemStore.category} required>
    <option value="">-- Select Category --</option>
    <option value="food">Food</option>
    <option value="drink">Drink</option>
  </select>
  
  <h3>Ingredients</h3>
  {#each $newItemStore.ingredients as ingredient, index (index)}
    <div>
      <select bind:value={ingredient.id} required>
        <option value="">-- Select Ingredient --</option>
        {#each ingredients as ing}
          <option value={ing.id}>{ing.name}</option>
        {/each}
      </select>
      <input type="number" bind:value={ingredient.amount} placeholder="Amount" step="0.01" required>
      <input bind:value={ingredient.unit} placeholder="Unit" required>
      <button type="button" on:click={() => removeIngredientFromItem(newItemStore, index)}>Remove</button>
    </div>
  {/each}
  <button type="button" on:click={() => addIngredientToItem(newItemStore)}>Add Ingredient</button>

  <h3>Detail Content (Markdown)</h3>
  <MarkdownEditor bind:value={$newItemStore.detail_content} />

  <label>
    <input type="checkbox" bind:checked={$newItemStore.is_visible}>
    Visible to users
  </label>

  <button type="submit">Add Item</button>
</form>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
      <th>Price</th>
      <th>Category</th>
      <th>Visibility</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {#each menuItems as item (item.id)}
      <tr>
        <td>{item.name}</td>
        <td>{item.description}</td>
        <td>{item.price}</td>
        <td>{item.category}</td>
        <td>
          <button on:click={() => toggleVisibility(item)}>
            {item.is_visible ? 'Hide' : 'Show'}
          </button>
        </td>
        <td>
          <button on:click={() => showDetails(item)}>View Details</button>
          <button on:click={() => deleteMenuItem(item.id)}>Delete</button>
        </td>
      </tr>
    {/each}
  </tbody>
</table>

{#if showPopup && $selectedItemStore}
  <div class="popup">
    <div class="popup-content">
      {#if editMode}
        <h2>Edit Menu Item</h2>
        <input bind:value={$selectedItemStore.name} placeholder="Name">
        <input bind:value={$selectedItemStore.description} placeholder="Description">
        <input type="number" bind:value={$selectedItemStore.price} placeholder="Price" step="0.01">
        <select bind:value={$selectedItemStore.category}>
          <option value="food">Food</option>
          <option value="drink">Drink</option>
        </select>
        
        <h3>Ingredients</h3>
        {#each $selectedItemStore.ingredients as ingredient, index (index)}
          <div>
            <select bind:value={ingredient.id}>
              <option value="">-- Select Ingredient --</option>
              {#each ingredients as ing}
                <option value={ing.id}>{ing.name}</option>
              {/each}
            </select>
            <input type="number" bind:value={ingredient.amount} placeholder="Amount" step="0.01">
            <input bind:value={ingredient.unit} placeholder="Unit">
            <button on:click={() => removeIngredientFromItem(selectedItemStore, index)}>Remove</button>
          </div>
        {/each}
        <button on:click={() => addIngredientToItem(selectedItemStore)}>Add Ingredient</button>

        <h3>Detail Content (Markdown)</h3>
        <MarkdownEditor 
          bind:value={$selectedItemStore.detail_content} 
          on:input={updateDetailContent}
        />
        
        <label>
          <input type="checkbox" bind:checked={$selectedItemStore.is_visible}>
          Visible to users
        </label>

        <button on:click={() => updateMenuItem($selectedItemStore)}>Save Changes</button>
      {:else}
        <h2>{$selectedItemStore.name}</h2>
        <p>Price: ${$selectedItemStore.price}</p>
        <p>Category: {$selectedItemStore.category}</p>
        <p>Description: {$selectedItemStore.description}</p>
        <p>Visibility: {$selectedItemStore.is_visible ? 'Visible' : 'Hidden'}</p>
        <h3>Ingredients</h3>
        <ul>
          {#each $selectedItemStore.ingredients || [] as ingredient}
            <li>{ingredient.amount} {ingredient.unit} of {ingredient.name}</li>
          {/each}
        </ul>
        <h3>Detail Content Preview</h3>
        <div class="markdown-preview">
          {@html renderMarkdown($selectedItemStore.detail_content)}
        </div>
      {/if}
      <button on:click={toggleEditMode}>{editMode ? 'Cancel' : 'Edit'}</button>
      <button on:click={closePopup}>Close</button>
    </div>
  </div>
{/if}

<style>
  .popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  .popup-content {
    background-color: white;
    padding: 2rem;
    border-radius: 5px;
    max-width: 80%;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
  }
  .markdown-preview {
    border: 1px solid #333;
    padding: 1rem;
    border-radius: 4px;
    max-height: 400px;
    overflow-y: auto;
    background-color: #2c2c2c;
  }

  .markdown-preview :global(h1),
  .markdown-preview :global(h2),
  .markdown-preview :global(h3),
  .markdown-preview :global(h4),
  .markdown-preview :global(h5),
  .markdown-preview :global(h6) {
    color: #bb86fc;
    margin-top: 1em;
    margin-bottom: 0.5em;
  }

  .markdown-preview :global(p) {
    margin-bottom: 1em;
  }

  .markdown-preview :global(ul),
  .markdown-preview :global(ol) {
    padding-left: 2em;
    margin-bottom: 1em;
  }

  .markdown-preview :global(code) {
    background-color: #3c3c3c;
    color: #e0e0e0;
    padding: 0.2em 0.4em;
    border-radius: 3px;
  }

  .markdown-preview :global(pre) {
    background-color: #3c3c3c;
    color: #e0e0e0;
    padding: 1em;
    border-radius: 3px;
    overflow-x: auto;
  }

  .markdown-preview :global(blockquote) {
    border-left: 4px solid #bb86fc;
    padding-left: 1em;
    margin-left: 0;
    color: #a0a0a0;
  }

  
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\admin\reservations\+page.svelte

<script>
  import { onMount } from 'svelte';
  import { Calendar } from '@fullcalendar/core';
  import dayGridPlugin from '@fullcalendar/daygrid';
  import interactionPlugin from '@fullcalendar/interaction';

  let availableDates = [];
  let menuItems = [];
  let reservations = [];
  let newDate = { date: '', time: '', capacity: 1, menu_id: null, drink_id: null };
  let calendarEl;
  let editingDate = null;

  onMount(async () => {
    await loadAvailableDates();
    await loadMenuItems();
    await loadReservations();
    initializeCalendar();
  });

  function initializeCalendar() {
    if (calendarEl) {
      const calendar = new Calendar(calendarEl, {
        plugins: [dayGridPlugin, interactionPlugin],
        initialView: 'dayGridMonth',
        dateClick: handleDateClick,
        events: availableDates.map(date => ({
          title: `${date.time} (${date.reserved_capacity || 0}/${date.capacity + date.reserved_capacity})`,
          date: date.date
        }))
      });
      calendar.render();
    }
  }

  async function loadAvailableDates() {
    const response = await fetch('/api/admin/available-dates');
    if (response.ok) {
      availableDates = await response.json();
    } else {
      console.error('Failed to load available dates');
    }
  }

  async function loadMenuItems() {
    const response = await fetch('/api/menu');
    if (response.ok) {
      menuItems = await response.json();
    } else {
      console.error('Failed to load menu items');
    }
  }

  async function loadReservations() {
    const response = await fetch('/api/admin/reservations');
    if (response.ok) {
      reservations = await response.json();
    } else {
      console.error('Failed to load reservations');
    }
  }

  async function addAvailableDate() {
    const response = await fetch('/api/admin/available-dates', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newDate)
    });

    if (response.ok) {
      await loadAvailableDates();
      newDate = { date: '', time: '', capacity: 1, menu_id: null, drink_id: null };
      initializeCalendar();
    } else {
      const errorData = await response.json();
      alert('Failed to add available date: ' + (errorData.error || 'Unknown error'));
    }
  }

  async function deleteAvailableDate(id) {
    const response = await fetch(`/api/admin/available-dates/${id}`, {
      method: 'DELETE'
    });

    if (response.ok) {
      await loadAvailableDates();
      await loadReservations();
      initializeCalendar();
    } else {
      alert('Failed to delete available date');
    }
  }

  async function deleteReservation(id) {
    if (confirm('Are you sure you want to delete this reservation?')) {
      const response = await fetch(`/api/admin/reservations/${id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        await loadReservations();
        await loadAvailableDates();
        initializeCalendar();
      } else {
        alert('Failed to delete reservation');
      }
    }
  }

  function handleDateClick(arg) {
    newDate.date = arg.dateStr;
  }

  function editAvailableDate(date) {
    editingDate = { ...date };
  }

  async function updateAvailableDate() {
    const response = await fetch(`/api/admin/available-dates/${editingDate.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        date: editingDate.date,
        time: editingDate.time,
        capacity: parseInt(editingDate.capacity),
        menu_id: editingDate.menu_id,
        drink_id: editingDate.drink_id
      })
    });
    if (response.ok) {
      await loadAvailableDates();
      initializeCalendar();
      editingDate = null;
    } else {
      const errorData = await response.json();
      alert('Failed to update available date: ' + (errorData.error || 'Unknown error'));
    }
  }

  $: if (availableDates.length > 0 && calendarEl) {
    initializeCalendar();
  }
</script>

<h1>Manage Available Dates and Reservations</h1>

<div class="calendar-container" bind:this={calendarEl}></div>

<form on:submit|preventDefault={addAvailableDate}>
  <input type="date" bind:value={newDate.date} required>
  <input type="time" bind:value={newDate.time} required>
  <input type="number" bind:value={newDate.capacity} min="1" required>
  <select bind:value={newDate.menu_id}>
    <option value={null}>-- Select Menu --</option>
    {#each menuItems.filter(item => item.category === 'food') as item}
      <option value={item.id}>{item.name}</option>
    {/each}
  </select>
  <select bind:value={newDate.drink_id}>
    <option value={null}>-- Select Drink --</option>
    {#each menuItems.filter(item => item.category === 'drink') as item}
      <option value={item.id}>{item.name}</option>
    {/each}
  </select>
  <button type="submit">Add Date</button>
</form>

<h2>Available Dates</h2>
<table>
  <thead>
    <tr>
      <th>Date</th>
      <th>Time</th>
      <th>Capacity</th>
      <th>Reserved</th>
      <th>Menu</th>
      <th>Drink</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {#each availableDates as date}
      <tr>
        <td>{date.date}</td>
        <td>{date.time}</td>
        <td>{date.capacity}</td>
        <td>{date.reserved_capacity || 0}</td>
        <td>{date.menu_name || 'Not set'}</td>
        <td>{date.drink_name || 'Not set'}</td>
        <td>
          <button on:click={() => editAvailableDate(date)}>Edit</button>
          <button on:click={() => deleteAvailableDate(date.id)}>Delete</button>
        </td>
      </tr>
    {/each}
  </tbody>
</table>

<h2>Reservations</h2>
<table>
  <thead>
    <tr>
      <th>Date</th>
      <th>Time</th>
      <th>User</th>
      <th>Guests</th>
      <th>Menu</th>
      <th>Drink</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {#each reservations as reservation}
      <tr>
        <td>{reservation.date}</td>
        <td>{reservation.time}</td>
        <td>{reservation.user_name}</td>
        <td>{reservation.guests}</td>
        <td>{reservation.menu_name}</td>
        <td>{reservation.drink_name}</td>
        <td>
          <button on:click={() => deleteReservation(reservation.id)}>Delete</button>
        </td>
      </tr>
    {/each}
  </tbody>
</table>

{#if editingDate}
  <div class="edit-form">
    <h3>Edit Available Date</h3>
    <label>
      Date:
      <input type="date" bind:value={editingDate.date}>
    </label>
    <label>
      Time:
      <input type="time" bind:value={editingDate.time}>
    </label>
    <label>
      Capacity:
      <input type="number" bind:value={editingDate.capacity} min="1">
    </label>
    <label>
      Menu:
      <select bind:value={editingDate.menu_id}>
        <option value="">-- Select Menu --</option>
        {#each menuItems.filter(item => item.category === 'food') as item}
          <option value={item.id}>{item.name}</option>
        {/each}
      </select>
    </label>
    <label>
      Drink:
      <select bind:value={editingDate.drink_id}>
        <option value="">-- Select Drink --</option>
        {#each menuItems.filter(item => item.category === 'drink') as item}
          <option value={item.id}>{item.name}</option>
        {/each}
      </select>
    </label>
    <button on:click={updateAvailableDate}>Save Changes</button>
    <button on:click={() => editingDate = null}>Cancel</button>
  </div>
{/if}

<style>
  .calendar-container {
    height: 600px;
    margin-bottom: 2rem;
  }
  form {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 2rem;
  }
  th, td {
    border: 1px solid #ddd;
    padding: 0.5rem;
    text-align: left;
  }
  .edit-form {
    margin-top: 1rem;
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  .edit-form label {
    display: block;
    margin-bottom: 0.5rem;
  }
  .edit-form input, .edit-form select {
    width: 100%;
    padding: 0.3rem;
  }
</style>

Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\available-dates


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\login


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\logout


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\menu


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\reservations


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\available-dates


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\database


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\ingredients


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\menu


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\reservations


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\stats


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\available-dates\[id]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\available-dates\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const dates = db
    .prepare(
      `
    SELECT 
      ad.*,
      m1.name as menu_name,
      m1.price as menu_price,
      m2.name as drink_name,
      m2.price as drink_price,
      COALESCE(SUM(r.guests), 0) as reserved_capacity
    FROM available_dates ad
    LEFT JOIN menu_items m1 ON ad.menu_id = m1.id
    LEFT JOIN menu_items m2 ON ad.drink_id = m2.id
    LEFT JOIN reservations r ON ad.date = r.date AND ad.time = r.time
    GROUP BY ad.id
    ORDER BY ad.date, ad.time
  `
    )
    .all();

  return json(dates);
}

export async function POST({ request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { date, time, capacity, menu_id, drink_id } = await request.json();

  console.log("Received data:", { date, time, capacity, menu_id, drink_id }); // 디버깅용

  try {
    // 유효한 menu_id 확인
    const validMenu = db
      .prepare("SELECT id FROM menu_items WHERE id = ? AND category = 'food'")
      .get(menu_id);
    console.log("Valid menu:", validMenu); // 디버깅용

    // 유효한 drink_id 확인
    const validDrink = db
      .prepare("SELECT id FROM menu_items WHERE id = ? AND category = 'drink'")
      .get(drink_id);
    console.log("Valid drink:", validDrink); // 디버깅용

    if ((menu_id && !validMenu) || (drink_id && !validDrink)) {
      return json({ error: "Invalid menu_id or drink_id" }, { status: 400 });
    }

    const result = db
      .prepare(
        "INSERT INTO available_dates (date, time, capacity, menu_id, drink_id) VALUES (?, ?, ?, ?, ?)"
      )
      .run(date, time, capacity, menu_id || null, drink_id || null);

    console.log("Insert result:", result); // 디버깅용

    if (result.changes > 0) {
      return json({ success: true, id: result.lastInsertRowid });
    } else {
      return json({ error: "Failed to add available date" }, { status: 500 });
    }
  } catch (error) {
    console.error("Error adding available date:", error);
    return json(
      { error: "Internal server error: " + error.message },
      { status: 500 }
    );
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\available-dates\[id]\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export async function PUT({ params, request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;
  const { date, time, capacity, menu_id, drink_id } = await request.json();

  try {
    // 유효한 menu_id 확인
    const validMenu = db
      .prepare("SELECT id FROM menu_items WHERE id = ? AND category = 'food'")
      .get(menu_id);
    if (menu_id && !validMenu) {
      return json({ error: "Invalid menu_id" }, { status: 400 });
    }

    // 유효한 drink_id 확인
    const validDrink = db
      .prepare("SELECT id FROM menu_items WHERE id = ? AND category = 'drink'")
      .get(drink_id);
    if (drink_id && !validDrink) {
      return json({ error: "Invalid drink_id" }, { status: 400 });
    }

    const result = db
      .prepare(
        `
      UPDATE available_dates 
      SET date = ?, time = ?, capacity = ?, menu_id = ?, drink_id = ?
      WHERE id = ?
    `
      )
      .run(date, time, capacity, menu_id || null, drink_id || null, id);

    if (result.changes > 0) {
      return json({ success: true });
    } else {
      return json(
        { error: "Failed to update available date" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error updating available date:", error);
    return json({ error: "Internal server error" }, { status: 500 });
  }
}

export async function DELETE({ params, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;

  db.prepare("BEGIN TRANSACTION").run();

  try {
    // 먼저 해당 날짜의 정보를 가져옵니다.
    const availableDate = db
      .prepare("SELECT date, time FROM available_dates WHERE id = ?")
      .get(id);

    if (!availableDate) {
      db.prepare("ROLLBACK").run();
      return json({ error: "Available date not found" }, { status: 404 });
    }

    // 해당 날짜의 모든 예약을 삭제합니다.
    db.prepare("DELETE FROM reservations WHERE date = ? AND time = ?").run(
      availableDate.date,
      availableDate.time
    );

    // 이제 available_date를 삭제합니다.
    const result = db
      .prepare("DELETE FROM available_dates WHERE id = ?")
      .run(id);

    if (result.changes > 0) {
      db.prepare("COMMIT").run();
      return json({ success: true });
    } else {
      db.prepare("ROLLBACK").run();
      return json(
        { error: "Failed to delete available date" },
        { status: 404 }
      );
    }
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error deleting available date:", error);
    return json({ error: "Internal server error" }, { status: 500 });
  }
}


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\database\tables


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\database\tables\[tableName]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\database\tables\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const tables = db
    .prepare("SELECT name FROM sqlite_master WHERE type='table'")
    .all()
    .map((t) => t.name);
  return json(tables);
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\database\tables\[tableName]\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ params, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { tableName } = params;

  const validTables = db
    .prepare("SELECT name FROM sqlite_master WHERE type='table'")
    .all()
    .map((t) => t.name);
  if (!validTables.includes(tableName)) {
    return json({ error: "Invalid table name" }, { status: 400 });
  }

  const data = db.prepare(`SELECT * FROM ${tableName}`).all();
  return json(data);
}

export async function DELETE({ params, request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { tableName } = params;
  const { id } = await request.json();

  const validTables = db
    .prepare("SELECT name FROM sqlite_master WHERE type='table'")
    .all()
    .map((t) => t.name);
  if (!validTables.includes(tableName)) {
    return json({ error: "Invalid table name" }, { status: 400 });
  }

  const query = `DELETE FROM ${tableName} WHERE id = ?`;
  const result = db.prepare(query).run(id);

  if (result.changes > 0) {
    return json({ success: true });
  } else {
    return json({ error: "Failed to delete record" }, { status: 500 });
  }
}

export async function PUT({ params, request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { tableName } = params;
  const updateData = await request.json();
  const id = updateData.id;

  const validTables = db
    .prepare("SELECT name FROM sqlite_master WHERE type='table'")
    .all()
    .map((t) => t.name);
  if (!validTables.includes(tableName)) {
    return json({ error: "Invalid table name" }, { status: 400 });
  }

  const fieldsToUpdate = Object.keys(updateData).filter((key) => key !== "id");
  const setClause = fieldsToUpdate.map((field) => `${field} = ?`).join(", ");
  const values = fieldsToUpdate.map((field) => updateData[field]);

  const query = `UPDATE ${tableName} SET ${setClause} WHERE id = ?`;

  try {
    const result = db.prepare(query).run(...values, id);
    return json({ success: true, changes: result.changes });
  } catch (error) {
    console.error("Error updating record:", error);
    return json(
      { error: "Failed to update record: " + error.message },
      { status: 500 }
    );
  }
}


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\ingredients\low-stock


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\ingredients\[id]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\ingredients\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const ingredients = db
    .prepare("SELECT * FROM ingredients ORDER BY name")
    .all();
  return json(ingredients);
}

export async function POST({ request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { name, cost, characteristics, volume, unit, min_volume } =
    await request.json();

  const result = db
    .prepare(
      "INSERT INTO ingredients (name, cost, characteristics, volume, unit, min_volume) VALUES (?, ?, ?, ?, ?, ?)"
    )
    .run(name, cost, characteristics, volume, unit, min_volume);

  if (result.changes > 0) {
    return json({ success: true, id: result.lastInsertRowid });
  } else {
    return json({ error: "Failed to add ingredient" }, { status: 500 });
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\ingredients\low-stock\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const lowStockIngredients = db
      .prepare(
        "SELECT * FROM ingredients WHERE volume <= min_volume AND min_volume IS NOT NULL"
      )
      .all();

    return json(lowStockIngredients);
  } catch (error) {
    console.error("Error fetching low stock ingredients:", error);
    return json({ error: "Internal Server Error" }, { status: 500 });
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\ingredients\[id]\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export async function PUT({ params, request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;
  const { name, cost, characteristics, volume, unit, min_volume } =
    await request.json();

  const result = db
    .prepare(
      "UPDATE ingredients SET name = ?, cost = ?, characteristics = ?, volume = ?, unit = ?, min_volume = ? WHERE id = ?"
    )
    .run(name, cost, characteristics, volume, unit, min_volume, id);

  if (result.changes > 0) {
    return json({ success: true });
  } else {
    return json({ error: "Failed to update ingredient" }, { status: 404 });
  }
}

export function DELETE({ params, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;

  const result = db.prepare("DELETE FROM ingredients WHERE id = ?").run(id);

  if (result.changes > 0) {
    return json({ success: true });
  } else {
    return json({ error: "Failed to delete ingredient" }, { status: 404 });
  }
}


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\menu\[id]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\menu\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export async function POST({ request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const {
    name,
    description,
    price,
    category,
    ingredients,
    detail_content,
    is_visible,
  } = await request.json();

  console.log("Received new item data:", {
    name,
    description,
    price,
    category,
    ingredients,
    detail_content,
    is_visible,
  });

  db.prepare("BEGIN TRANSACTION").run();

  try {
    const result = db
      .prepare(
        "INSERT INTO menu_items (name, description, price, category, detail_content, is_visible) VALUES (?, ?, ?, ?, ?, ?)"
      )
      .run(
        name,
        description,
        price,
        category,
        detail_content,
        is_visible ? 1 : 0
      ); // 여기를 수정

    const menuId = result.lastInsertRowid;

    if (ingredients && ingredients.length > 0) {
      const insertIngredient = db.prepare(
        "INSERT INTO menu_ingredients (menu_id, ingredient_id, amount, unit) VALUES (?, ?, ?, ?)"
      );

      for (const ingredient of ingredients) {
        if (ingredient.id && ingredient.id !== "") {
          insertIngredient.run(
            menuId,
            ingredient.id,
            ingredient.amount,
            ingredient.unit
          );
        }
      }
    }

    db.prepare("COMMIT").run();

    console.log("New item added successfully:", menuId);

    return json({ success: true, id: menuId });
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error adding menu item:", error);
    return json(
      { error: "Failed to add menu item: " + error.message },
      { status: 500 }
    );
  }
}

export function GET({ locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const menuItems = db
      .prepare(
        "SELECT id, name, description, price, category, detail_content, is_visible FROM menu_items"
      )
      .all()
      .map((item) => ({
        ...item,
        is_visible: Boolean(item.is_visible), // 정수를 boolean으로 변환
      }));

    for (const item of menuItems) {
      item.ingredients = db
        .prepare(
          `
        SELECT i.id, i.name, mi.amount, mi.unit
        FROM menu_ingredients mi
        JOIN ingredients i ON mi.ingredient_id = i.id
        WHERE mi.menu_id = ?
      `
        )
        .all(item.id);
    }

    console.log("Menu items:", menuItems);

    return json(menuItems);
  } catch (error) {
    console.error("Error fetching menu items:", error);
    return json(
      { error: "Failed to fetch menu items: " + error.message },
      { status: 500 }
    );
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\menu\[id]\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export async function PUT({ params, request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;
  const {
    name,
    description,
    price,
    category,
    ingredients,
    detail_content,
    is_visible,
  } = await request.json();

  db.prepare("BEGIN TRANSACTION").run();

  try {
    db.prepare(
      "UPDATE menu_items SET name = ?, description = ?, price = ?, category = ?, detail_content = ?, is_visible = ? WHERE id = ?"
    ).run(
      name,
      description,
      price,
      category,
      detail_content,
      is_visible ? 1 : 0,
      id
    );

    db.prepare("DELETE FROM menu_ingredients WHERE menu_id = ?").run(id);

    if (ingredients && ingredients.length > 0) {
      const insertIngredient = db.prepare(
        "INSERT INTO menu_ingredients (menu_id, ingredient_id, amount, unit) VALUES (?, ?, ?, ?)"
      );

      for (const ingredient of ingredients) {
        if (ingredient.id && ingredient.id !== "") {
          insertIngredient.run(
            id,
            ingredient.id,
            ingredient.amount,
            ingredient.unit
          );
        }
      }
    }

    db.prepare("COMMIT").run();

    return json({ success: true });
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error updating menu item:", error);
    return json(
      { error: "Failed to update menu item: " + error.message },
      { status: 500 }
    );
  }
}

export async function DELETE({ params, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;

  db.prepare("BEGIN TRANSACTION").run();

  try {
    db.prepare("DELETE FROM menu_ingredients WHERE menu_id = ?").run(id);
    const result = db.prepare("DELETE FROM menu_items WHERE id = ?").run(id);

    db.prepare("COMMIT").run();

    if (result.changes === 0) {
      return json({ error: "Menu item not found" }, { status: 404 });
    }

    return json({ success: true });
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error deleting menu item:", error);
    return json(
      { error: "Failed to delete menu item: " + error.message },
      { status: 500 }
    );
  }
}


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\reservations\[id]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\reservations\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const reservations = db
      .prepare(
        `
      SELECT r.*, 
             m1.name as menu_name, 
             m2.name as drink_name
      FROM reservations r
      LEFT JOIN available_dates ad ON r.date = ad.date AND r.time = ad.time
      LEFT JOIN menu_items m1 ON ad.menu_id = m1.id
      LEFT JOIN menu_items m2 ON ad.drink_id = m2.id
      ORDER BY r.date, r.time
    `
      )
      .all();

    return json(reservations);
  } catch (error) {
    console.error("Error fetching reservations:", error);
    return json({ error: "Failed to fetch reservations" }, { status: 500 });
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\reservations\[id]\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export async function PUT({ params, request, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;
  const { date, time, guests, menu_id, drink_id } = await request.json();

  db.prepare("BEGIN TRANSACTION").run();

  try {
    const oldReservation = db
      .prepare("SELECT * FROM reservations WHERE id = ?")
      .get(id);

    if (!oldReservation) {
      db.prepare("ROLLBACK").run();
      return json({ error: "Reservation not found" }, { status: 404 });
    }

    // Update the reservation
    db.prepare(
      `
      UPDATE reservations 
      SET date = ?, time = ?, guests = ?
      WHERE id = ?
    `
    ).run(date, time, guests, id);

    // Update the available date
    let availableDate = db
      .prepare("SELECT * FROM available_dates WHERE date = ? AND time = ?")
      .get(date, time);

    if (!availableDate) {
      // If the available date doesn't exist, create it
      db.prepare(
        `
        INSERT INTO available_dates (date, time, capacity, menu_id, drink_id)
        VALUES (?, ?, ?, ?, ?)
      `
      ).run(date, time, 0, menu_id, drink_id);

      availableDate = db
        .prepare("SELECT * FROM available_dates WHERE date = ? AND time = ?")
        .get(date, time);
    } else {
      // Update the existing available date
      db.prepare(
        `
        UPDATE available_dates
        SET menu_id = ?, drink_id = ?
        WHERE date = ? AND time = ?
      `
      ).run(menu_id, drink_id, date, time);
    }

    // Update available capacity
    if (
      oldReservation.date !== date ||
      oldReservation.time !== time ||
      oldReservation.guests !== guests
    ) {
      // Remove guests from old date/time
      db.prepare(
        `
        UPDATE available_dates
        SET capacity = capacity + ?
        WHERE date = ? AND time = ?
      `
      ).run(oldReservation.guests, oldReservation.date, oldReservation.time);

      // Add guests to new date/time
      db.prepare(
        `
        UPDATE available_dates
        SET capacity = capacity - ?
        WHERE date = ? AND time = ?
      `
      ).run(guests, date, time);
    }

    db.prepare("COMMIT").run();

    return json({ success: true });
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error updating reservation:", error);
    return json(
      { error: "Failed to update reservation: " + error.message },
      { status: 500 }
    );
  }
}

export async function DELETE({ params, locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;

  db.prepare("BEGIN TRANSACTION").run();

  try {
    const reservation = db
      .prepare("SELECT * FROM reservations WHERE id = ?")
      .get(id);

    if (!reservation) {
      db.prepare("ROLLBACK").run();
      return json({ error: "Reservation not found" }, { status: 404 });
    }

    const deleteResult = db
      .prepare("DELETE FROM reservations WHERE id = ?")
      .run(id);

    if (deleteResult.changes > 0) {
      // Update available capacity
      const updateCapacityResult = db
        .prepare(
          "UPDATE available_dates SET capacity = capacity + ? WHERE date = ? AND time = ?"
        )
        .run(reservation.guests, reservation.date, reservation.time);

      if (updateCapacityResult.changes === 0) {
        // If no rows were updated, it means the available_date doesn't exist
        db.prepare(
          "INSERT INTO available_dates (date, time, capacity, menu_id, drink_id) VALUES (?, ?, ?, NULL, NULL)"
        ).run(reservation.date, reservation.time, reservation.guests);
      }

      db.prepare("COMMIT").run();
      return json({ success: true });
    } else {
      db.prepare("ROLLBACK").run();
      return json({ error: "Failed to cancel reservation" }, { status: 500 });
    }
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error cancelling reservation:", error);
    return json({ error: "Internal server error" }, { status: 500 });
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\admin\stats\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ locals }) {
  if (!locals.user || locals.user.role !== "admin") {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const stats = {
    totalReservations: db
      .prepare("SELECT COUNT(*) as count FROM reservations")
      .get().count,
    pendingReservations: db
      .prepare("SELECT COUNT(*) as count FROM reservations WHERE status = ?")
      .get("pending").count,
    totalMenuItems: db.prepare("SELECT COUNT(*) as count FROM menu_items").get()
      .count,
    totalUsers: db.prepare("SELECT COUNT(*) as count FROM users").get().count,
  };

  return json(stats);
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\available-dates\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET() {
  const dates = db
    .prepare(
      `
    SELECT 
      ad.*,
      m1.name as menu_name,
      m1.price as menu_price,
      m2.name as drink_name,
      m2.price as drink_price,
      COALESCE(SUM(r.guests), 0) as reserved_capacity
    FROM available_dates ad
    LEFT JOIN menu_items m1 ON ad.menu_id = m1.id AND m1.category = 'food'
    LEFT JOIN menu_items m2 ON ad.drink_id = m2.id AND m2.category = 'drink'
    LEFT JOIN reservations r ON ad.date = r.date AND ad.time = r.time
    WHERE ad.date >= date('now')
    GROUP BY ad.id
    ORDER BY ad.date, ad.time
  `
    )
    .all();

  const processedDates = dates.map((date) => ({
    ...date,
    reserved_capacity: parseInt(date.reserved_capacity),
    available_capacity: date.capacity - parseInt(date.reserved_capacity),
  }));

  return json(processedDates);
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\login\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";
import { dev } from "$app/environment";

export async function POST({ request, cookies }) {
  const { name } = await request.json();

  let user = db.prepare("SELECT * FROM users WHERE name = ?").get(name);

  if (!user) {
    try {
      const result = db
        .prepare("INSERT INTO users (name, role) VALUES (?, ?)")
        .run(name, "user");
      user = { id: result.lastInsertRowid, name, role: "user" };
    } catch (error) {
      if (error.code === "SQLITE_CONSTRAINT") {
        user = db.prepare("SELECT * FROM users WHERE name = ?").get(name);
      } else {
        console.error("Error creating user:", error);
        return json({ error: "Failed to create user" }, { status: 500 });
      }
    }
  }

  cookies.set("session", JSON.stringify(user), {
    path: "/",
    httpOnly: true,
    sameSite: "lax",
    secure: false,
    maxAge: 60 * 60 * 24 * 7, // 1 week
  });

  return json({ success: true, user });
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\logout\+server.js

import { json } from "@sveltejs/kit";
import { dev } from "$app/environment";

export function POST({ cookies }) {
  cookies.delete("session", {
    path: "/",
    httpOnly: true,
    sameSite: "lax",
    secure: false,
  });
  return json({ success: true });
}


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\menu\[id]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\menu\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET() {
  const menuItems = db
    .prepare(
      "SELECT * FROM menu_items WHERE is_visible = 1 ORDER BY category, name"
    )
    .all();
  return json(menuItems);
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\menu\[id]\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ params }) {
  const { id } = params;

  try {
    const menuItem = db
      .prepare("SELECT * FROM menu_items WHERE id = ?")
      .get(id);

    if (!menuItem) {
      return json({ error: "Menu item not found" }, { status: 404 });
    }

    menuItem.ingredients = db
      .prepare(
        `
      SELECT i.name, mi.amount, mi.unit
      FROM menu_ingredients mi
      JOIN ingredients i ON mi.ingredient_id = i.id
      WHERE mi.menu_id = ?
    `
      )
      .all(id);

    return json(menuItem);
  } catch (error) {
    console.error("Error fetching menu item:", error);
    return json(
      { error: "Failed to fetch menu item: " + error.message },
      { status: 500 }
    );
  }
}


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\reservations\user


Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\reservations\[id]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\reservations\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export async function POST({ request, locals }) {
  if (!locals.user) {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { date, time, guests, menuRequest, drinkRequest } =
    await request.json();

  db.prepare("BEGIN TRANSACTION").run();

  try {
    const availableDate = db
      .prepare("SELECT * FROM available_dates WHERE date = ? AND time = ?")
      .get(date, time);

    if (!availableDate || guests > availableDate.capacity) {
      db.prepare("ROLLBACK").run();
      return json(
        { error: "Date not available or insufficient capacity" },
        { status: 400 }
      );
    }

    const result = db
      .prepare(
        "INSERT INTO reservations (user_name, date, time, guests, menu_request, drink_request) VALUES (?, ?, ?, ?, ?, ?)"
      )
      .run(locals.user.name, date, time, guests, menuRequest, drinkRequest);

    db.prepare(
      "UPDATE available_dates SET capacity = capacity - ? WHERE id = ?"
    ).run(guests, availableDate.id);

    db.prepare("COMMIT").run();

    return json({ success: true });
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error creating reservation:", error);
    return json(
      { error: "Failed to create reservation: " + error.message },
      { status: 500 }
    );
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\reservations\user\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export function GET({ locals }) {
  if (!locals.user) {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const userReservations = db
    .prepare(
      `
    SELECT r.*, m1.name as menu_name, m2.name as drink_name
    FROM reservations r
    LEFT JOIN available_dates ad ON r.date = ad.date AND r.time = ad.time
    LEFT JOIN menu_items m1 ON ad.menu_id = m1.id
    LEFT JOIN menu_items m2 ON ad.drink_id = m2.id
    WHERE r.user_name = ?
    ORDER BY r.date, r.time
  `
    )
    .all(locals.user.name);

  return json(userReservations);
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\api\reservations\[id]\+server.js

import { db } from "$lib/db";
import { json } from "@sveltejs/kit";

export async function DELETE({ params, locals }) {
  if (!locals.user) {
    return json({ error: "Unauthorized" }, { status: 401 });
  }

  const { id } = params;

  db.prepare("BEGIN TRANSACTION").run();

  try {
    const reservation = db
      .prepare("SELECT * FROM reservations WHERE id = ?")
      .get(id);

    if (!reservation) {
      db.prepare("ROLLBACK").run();
      return json({ error: "Reservation not found" }, { status: 404 });
    }

    if (
      locals.user.role !== "admin" &&
      reservation.user_name !== locals.user.name
    ) {
      db.prepare("ROLLBACK").run();
      return json({ error: "Unauthorized" }, { status: 401 });
    }

    const deleteResult = db
      .prepare("DELETE FROM reservations WHERE id = ?")
      .run(id);

    if (deleteResult.changes > 0) {
      // Increase the available capacity
      db.prepare(
        `
        UPDATE available_dates 
        SET capacity = capacity + ? 
        WHERE date = ? AND time = ?
      `
      ).run(reservation.guests, reservation.date, reservation.time);

      db.prepare("COMMIT").run();
      return json({ success: true });
    } else {
      db.prepare("ROLLBACK").run();
      return json({ error: "Failed to cancel reservation" }, { status: 500 });
    }
  } catch (error) {
    db.prepare("ROLLBACK").run();
    console.error("Error cancelling reservation:", error);
    return json({ error: "Internal server error" }, { status: 500 });
  }
}


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\login\+page.svelte

<script>
  import { goto } from '$app/navigation';
  import { invalidateAll } from '$app/navigation';

  let name = '';
  let error = '';

  async function handleSubmit() {
    const response = await fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name })
    });

    if (response.ok) {
      await invalidateAll();
      goto('/');
    } else {
      const data = await response.json();
      error = data.message;
    }
  }
</script>

<h1>Login</h1>

<form on:submit|preventDefault={handleSubmit}>
  <label for="name">Name:</label>
  <input id="name" bind:value={name} required>
  <button type="submit">Login</button>
</form>

{#if error}
  <p class="error">{error}</p>
{/if}

<style>
  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 300px;
  }
  .error {
    color: red;
  }
</style>

Directory: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\menu\[id]


File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\menu\+page.svelte

<script>
  import { onMount } from 'svelte';
  import MenuDetailPopup from '$lib/MenuDetailPopup.svelte';

  let menuItems = [];
  let selectedItem = null;

  onMount(async () => {
    const response = await fetch('/api/menu');
    if (response.ok) {
      menuItems = await response.json();
    } else {
      console.error('Failed to load menu items');
    }
  });

  async function showDetails(item) {
    const response = await fetch(`/api/menu/${item.id}`);
    if (response.ok) {
      selectedItem = await response.json();
    } else {
      console.error('Failed to load menu item details');
    }
  }

  function closePopup() {
    selectedItem = null;
  }
</script>

<h1>Our Menu</h1>

{#if menuItems.length > 0}
  <div class="menu-grid">
    {#each menuItems as item}
      <div class="menu-item">
        <h3>{item.name}</h3>
        <p>{item.description}</p>
        <p class="price">${item.price.toFixed(2)}</p>
        <p class="category">{item.category}</p>
        <button on:click={() => showDetails(item)}>View Details</button>
      </div>
    {/each}
  </div>
{:else}
  <p>No menu items available.</p>
{/if}

<MenuDetailPopup item={selectedItem} onClose={closePopup} /><style>
  .menu-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }
  .menu-item {
    border: 1px solid #ddd;
    padding: 1rem;
    border-radius: 5px;
  }
  .price {
    font-weight: bold;
    color: #4a4a4a;
  }
  .category {
    font-style: italic;
    color: #6a6a6a;
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\menu\[id]\+page.svelte

<script>
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { marked } from 'marked';

  let menuItem = null;

  onMount(async () => {
    const id = $page.params.id;
    const response = await fetch(`/api/menu/${id}`);
    if (response.ok) {
      menuItem = await response.json();
    } else {
      console.error('Failed to load menu item');
    }
  });
</script>

{#if menuItem}
  <div class="menu-item-detail">
    <h1>{menuItem.name}</h1>
    <p class="price">Price: ${menuItem.price}</p>
    <p class="category">Category: {menuItem.category}</p>
    <p class="description">Description: {menuItem.description}</p>

    <h2>Details</h2>
    <div class="detail-content">
      {@html marked(menuItem.detail_content || '')}
    </div>

    <h2>Ingredients</h2>
    <ul class="ingredients-list">
      {#each menuItem.ingredients as ingredient}
        <li>{ingredient.amount} {ingredient.unit} of {ingredient.name}</li>
      {/each}
    </ul>
  </div>
{:else}
  <p>Loading...</p>
{/if}

<style>
  .menu-item-detail {
    color: var(--color-text);
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  h1, h2 {
    color: var(--color-primary);
  }

  .price, .category, .description {
    margin-bottom: 1rem;
  }

  .detail-content {
    background-color: var(--color-surface);
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 2rem;
  }

  .detail-content :global(img) {
    max-width: 100%;
    height: auto;
  }

  .detail-content :global(p) {
    margin-bottom: 1rem;
  }

  .detail-content :global(h1),
  .detail-content :global(h2),
  .detail-content :global(h3),
  .detail-content :global(h4),
  .detail-content :global(h5),
  .detail-content :global(h6) {
    color: var(--color-primary);
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .detail-content :global(a) {
    color: var(--color-secondary);
  }

  .detail-content :global(code) {
    background-color: #333;
    color: var(--color-text);
    padding: 0.2em 0.4em;
    border-radius: 3px;
  }

  .detail-content :global(pre) {
    background-color: #333;
    color: var(--color-text);
    padding: 1em;
    border-radius: 4px;
    overflow-x: auto;
  }

  .detail-content :global(blockquote) {
    border-left: 4px solid var(--color-secondary);
    color: #bbb;
    padding-left: 1rem;
    margin-left: 0;
  }

  .ingredients-list {
    list-style-type: none;
    padding: 0;
  }

  .ingredients-list li {
    margin-bottom: 0.5rem;
  }
  
  @media (max-width: 768px) {
    .menu-item-detail {
      padding: 1rem;
    }

    .detail-content {
      padding: 0.5rem;
    }
  }
</style>

File: C:\Users\사용자\Desktop\2024\24-2\bar-cafe-project\src\routes\reservations\+page.svelte

<script>
  import { onMount } from 'svelte';
  import { Calendar } from '@fullcalendar/core';
  import dayGridPlugin from '@fullcalendar/daygrid';
  import interactionPlugin from '@fullcalendar/interaction';
  import MenuDetailPopup from '$lib/MenuDetailPopup.svelte';
  import { goto } from '$app/navigation';

  let availableDates = [];
  let selectedDate = null;
  let guests = 1;
  let menuRequest = '';
  let drinkRequest = '';
  let calendarEl;
  let showPopup = false;
  let userReservations = [];
  let selectedMenuItem = null;

  onMount(async () => {
    await loadAvailableDates();
    await loadUserReservations();
    initializeCalendar();
  });

  async function loadAvailableDates() {
    const response = await fetch('/api/available-dates');
    if (response.ok) {
      availableDates = await response.json();
    } else {
      console.error('Failed to load available dates');
    }
  }

  async function loadUserReservations() {
    const response = await fetch('/api/reservations/user');
    if (response.ok) {
      userReservations = await response.json();
    } else {
      console.error('Failed to load user reservations');
    }
  }

  function initializeCalendar() {
    if (calendarEl) {
      const calendar = new Calendar(calendarEl, {
        plugins: [dayGridPlugin, interactionPlugin],
        initialView: 'dayGridMonth',
        dateClick: handleDateClick,
        events: availableDates.map(date => ({
          title: `${date.time} (${date.reserved_capacity || 0}/${date.capacity + date.reserved_capacity})`,
          date: date.date
        })),
        headerToolbar: {
          left: 'prev',
          center: 'title',
          right: 'next'
        },
        titleFormat: { month: 'numeric' },
        dayHeaderFormat: { weekday: 'short' },
        buttonText: {
          prev: '<',
          next: '>'
        }
      });
      calendar.render();
    }
  }

  function handleDateClick(arg) {
    const clickedDate = availableDates.find(date => date.date === arg.dateStr);
    if (clickedDate) {
      selectedDate = clickedDate;
      showPopup = true;
    }
  }

  function closePopup() {
    showPopup = false;
  }

  async function makeReservation() {
    if (!selectedDate) {
      alert('Please select a date and time');
      return;
    }

    if (guests > selectedDate.capacity) {
      alert('Not enough capacity for this reservation');
      return;
    }

    const response = await fetch('/api/reservations', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        date: selectedDate.date,
        time: selectedDate.time,
        guests,
        menuRequest,
        drinkRequest
      })
    });

    if (response.ok) {
      alert('Reservation made successfully!');
      selectedDate = null;
      guests = 1;
      menuRequest = '';
      drinkRequest = '';
      showPopup = false;
      await loadAvailableDates();
      await loadUserReservations();
      initializeCalendar();
    } else {
      const errorData = await response.json();
      if (errorData.error === "Unauthorized") {
        if (confirm("You need to be logged in to make a reservation. Would you like to log in now?")) {
          goto('/login');
        }
      } else {
        alert('Failed to make reservation: ' + (errorData.error || 'Unknown error'));
      }
    }
  }

  async function cancelReservation(id) {
    if (confirm('Are you sure you want to cancel this reservation?')) {
      const response = await fetch(`/api/reservations/${id}`, {
        method: 'DELETE'
      });
      if (response.ok) {
        await loadUserReservations();
        await loadAvailableDates();
        initializeCalendar();
      } else {
        alert('Failed to cancel reservation');
      }
    }
  }

  async function showMenuDetails(menuId) {
    const response = await fetch(`/api/menu/${menuId}`);
    if (response.ok) {
      selectedMenuItem = await response.json();
    } else {
      console.error('Failed to load menu item details');
    }
  }

  function closeMenuPopup() {
    selectedMenuItem = null;
  }

  $: availableCapacity = selectedDate ? selectedDate.capacity : 0;
</script>

<h1>Make a Reservation</h1>

<div class="calendar-container" bind:this={calendarEl}></div>

{#if showPopup && selectedDate}
  <div class="popup" on:click={closePopup}>
    <div class="popup-content" on:click|stopPropagation>
      <h2>Make a Reservation for {selectedDate.date} at {selectedDate.time}</h2>
      <p>Menu: {selectedDate.menu_name} (${selectedDate.menu_price}) 
        <button on:click={() => showMenuDetails(selectedDate.menu_id)}>View Menu Details</button>
      </p>
      <p>Drink: {selectedDate.drink_name} (${selectedDate.drink_price})
        <button on:click={() => showMenuDetails(selectedDate.drink_id)}>View Drink Details</button>
      </p>
      <p>Available: {selectedDate.reserved_capacity}/{selectedDate.capacity + selectedDate.reserved_capacity}</p>

      <form on:submit|preventDefault={makeReservation}>
        <label for="guests">Number of guests:</label>
        <input id="guests" type="number" bind:value={guests} min="1" max={availableCapacity} required>

        <label for="menuRequest">Special menu requests:</label>
        <textarea id="menuRequest" bind:value={menuRequest}></textarea>

        <label for="drinkRequest">Special drink requests:</label>
        <textarea id="drinkRequest" bind:value={drinkRequest}></textarea>

        <button type="submit">Make Reservation</button>
        <button type="button" on:click={closePopup}>Cancel</button>
      </form>
    </div>
  </div>
{/if}

<h2>Your Reservations</h2>
{#if userReservations.length > 0}
  <table>
    <thead>
      <tr>
        <th>Date</th>
        <th>Time</th>
        <th>Guests</th>
        <th>Menu</th>
        <th>Drink</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      {#each userReservations as reservation}
        <tr>
          <td data-label="Date">{reservation.date}</td>
          <td data-label="Time">{reservation.time}</td>
          <td data-label="Guests">{reservation.guests}</td>
          <td data-label="Menu">{reservation.menu_name}</td>
          <td data-label="Drink">{reservation.drink_name}</td>
          <td data-label="Actions">
            <button on:click={() => cancelReservation(reservation.id)}>Cancel</button>
          </td>
        </tr>
      {/each}
    </tbody>
  </table>
{:else}
  <p>You have no reservations.</p>
{/if}

<MenuDetailPopup item={selectedMenuItem} onClose={closeMenuPopup} />

<style>
  .calendar-container {
    height: 400px;
    margin-bottom: 2rem;
    background-color: #000;
    width: 100%;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  /* FullCalendar 스타일 오버라이드 */
  :global(.fc) {
    background-color: #000;
    color: #fff;
  }

  :global(.fc-toolbar-title) {
    color: #bb86fc !important;
    font-size: 2rem !important;
  }

  :global(.fc-col-header-cell-cushion) {
    color: #fff;
  }

  :global(.fc-daygrid-day-number) {
    color: #fff;
  }

  :global(.fc-day-today) {
    background-color: transparent !important;
  }

  :global(.fc-event) {
    background-color: var(--color-secondary);
    border-color: var(--color-secondary);
  }

  :global(.fc-button-primary) {
    background-color: transparent !important;
    border-color: transparent !important;
    color: #ff0000 !important;
    font-size: 1.5rem !important;
    padding: 0.3em 0.5em !important;
    box-shadow: none !important;
  }

  :global(.fc-button-primary:hover),
  :global(.fc-button-primary:focus),
  :global(.fc-button-primary:not(:disabled):active),
  :global(.fc-button-primary:not(:disabled).fc-button-active) {
    background-color: transparent !important;
    border-color: transparent !important;
    color: #ff0000 !important;
    opacity: 0.8;  /* 약간의 시각적 피드백을 위해 투명도 조정 */
  }


  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 2rem;
  }

  th, td {
    border: 1px solid #444;
    padding: 0.5rem;
    text-align: left;
  }

  .popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .popup-content {
    background-color: #222;
    color: #e0e0e0;
    padding: 2rem;
    border-radius: 5px;
    max-width: 500px;
    width: 100%;
  }

  .popup-content h2 {
    color: #bb86fc;
    margin-bottom: 1rem;
  }

  .popup-content p {
    margin-bottom: 0.5rem;
  }

  .popup-content button {
    background-color: #bb86fc;
    color: #000;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .popup-content button:hover {
    background-color: #9d61f9;
  }

  .popup-content input,
  .popup-content textarea {
    background-color: #333;
    color: #e0e0e0;
    border: 1px solid #555;
    padding: 0.5rem;
    border-radius: 4px;
    width: 100%;
  }

  .popup-content label {
    display: block;
    margin-bottom: 0.3rem;
    color: #bb86fc;
  }


  @media (max-width: 768px) {
    .calendar-container {
      height: 350px;  /* 모바일에서는 더 작게 조정 */
    }
    
    /* ... (나머지 모바일 스타일은 그대로 유지) */
  }
</style>
